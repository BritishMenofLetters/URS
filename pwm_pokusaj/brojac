;



; AssemblerApplication6.asm



;



; Created: 3.6.2022. 7:19:56



; Author : mateo i malo merise



;











; Replace with your application code



.include "m16def.inc"







.cseg







.org 0x0000

.def	iLoopRl = r24	

.def	iLoopRh = r25	

.def	loopCt	= r18

.def	NULA	= r13

		

	

	rjmp restart





.org INT0addr	jmp 	EXT_INT0 	; Timer0 Compare Handler

.org OC0addr	jmp 	TIM0_COMP 	; Timer0 Compare Handler











restart:



	ldi r16, 0x00

	mov NULA, r16



	.equ iVal=22 //inicijalizacija



	//inicijalizacija stoga



	ldi r16, low(RAMEND)



	out SPL, r16



	ldi r16, high(RAMEND)



	out SPH, r16







	LDI r17, 0b00000011		// nula registra za dekadsko brojanje







	//postavljanje ulaznog pina D2



	cbi DDRD, 0x02



	cbi PORTD, 0x02



	//omoguci vanjske interupte



	ldi r16, 1<<ISC00



	out MCUCR, r16







	ldi r16, 1<<INT0



	out GICR, r16







	//postavljanje timera 1ms - moguce je da je na 0.5ms



	ldi r16, 1<<TOV0 | 1<<OCF0



	out TIFR, r16







	ldi r16, 1<<OCIE0



	out TIMSK, r16







	ldi r16, 0x02



	out OCR0, r16







	//postavljanje brojnih registara na nulu



	//setiranje pinova

	ldi r16, 0xff

	out ddrc, r16



	ldi r16, 0xff

	out ddrb, r16



	mov r0, r17



	mov r1, r17

	mov r2, r17

	mov r3, r17

	mov r4, r17

	mov r5, r17

	mov r6, r17



	



	//postavljanje mjesta zareza



	ldi r16, 0x08



	mov r7, r16	//zarez je na pocetnom mjestu







	//binarni brojac vremena



	clr r8



	clr r9



	clr r10



	











	sei















main:

	

	

	ldi r16, 0x08

	mov r11, r16

	mov  r12, r7



	//ipsis zareza

	ldi r16, 0x80

	out PORTC, r16



	mov r16, r7

	out PORTB, r16

	ldi r16, 0x00

	CALL delay10ms		

	out PORTB, R16



//ispis znamenaka



	lsr r12

	brcc REG_PET

	adc r12, NULA



	mov r16, r6

	call ISPIS_ZNAMENKE





	mov  R16, r11

	out PORTB, R16

	ldi r16, 0x00

	CALL delay10ms		

	out PORTB, R16

	

	lsr r11





REG_PET:

	

	lsr r12

	brcc REG_CETIRI

	adc r12, NULA



	mov r16, r5

	call ISPIS_ZNAMENKE



	mov  R16, r11

	out PORTB, R16

	ldi r16, 0x00 

	CALL delay10ms

	out PORTB, R16



	lsr r11



REG_CETIRI:

	lsr r12

	brcc REG_TRI

	adc r12, NULA

	



	mov r16, r4

	call ISPIS_ZNAMENKE

	



	mov  R16, r11

	out PORTB, R16

	ldi r16, 0x00 

	CALL delay10ms

	out PORTB, R16

	

	lsr r11



REG_TRI:



	

	mov r16, r3

	call ISPIS_ZNAMENKE





	

	mov R16, r11

	out PORTB, R16

	ldi r16, 0x00 

	CALL delay10ms

	out PORTB, R16



	lsr r11

	breq main





	mov r16, r2

	call ISPIS_ZNAMENKE





	

	mov R16, r11

	out PORTB, R16

	ldi r16, 0x00 

	CALL delay10ms

	out PORTB, R16



	lsr r11

	breq KRAJ





	mov r16, r1

	call ISPIS_ZNAMENKE





	

	mov R16, r11

	out PORTB, R16

	ldi r16, 0x00 

	CALL delay10ms

	out PORTB, R16





	lsr r11

	breq KRAJ







	mov r16, r0

	call ISPIS_ZNAMENKE





	

	mov R16, r11

	out PORTB, R16

	ldi r16, 0x00 

	CALL delay10ms

	out PORTB, R16



KRAJ:

	rjmp main











delay10ms:



		ldi	iLoopRl,LOW(iVal)	; intialize inner loop count in inner

		ldi	iLoopRh,HIGH(iVal)	; loop high and low registers



iLoop:	sbiw	iLoopRl,1		; decrement inner loop registers

		brne	iLoop			; branch to iLoop if iLoop registers != 0



		dec	loopCt			; decrement outer loop register

		brne	delay10ms		; branch to oLoop if outer loop register != 0

	//	rjmp start



		ret



INKREMENT_ZNAMENKE:





	//povecaj jos i binarni brojac



	//povecavanje display znamenku

    lsl r16



	in r17, SREG

	sbrs r17, 0 //skipaj ako je C setan 

	ret



	lsr r16



	lsr r16



	inc r16







	ret











EXT_INT0:



//TODO: ubaciti push, pop



//pokretanje timera - ako je pritisnut D2



	sbis PIND, 2



	jmp zaustavi_timer



	



	clr r16



	out TCNT0, r16



	ldi r16, (1<<CS01) | (1<<WGM01) | (1<<WGM00)



 	out TCCR0, r16



	reti



zaustavi_timer:



	ldi r16, (0<<CS01) | (0<<CS00)



	reti















TIM0_COMP:	//svake 1ms pomaknuti brojac R0, R1, R2, R3, R4, R5, R6 .... R6-R5-R4-R3,R2-R1-R0



	



	push r16		



	in r16, SREG



	push r16







	//za inkrementiranje bin brojaca



	ldi r16, 0x01



	add r8, r16



	ldi r16, 0x00



	adc r9, r16



	adc r10, r16



	







	//povecaj R0



	mov r16, r0



	call INKREMENT_ZNAMENKE



	mov r0, r16



	



	//ako je R0 isa sa 9 na 0, povecaj R1



	cpi r16, 0x03



	BRNE KRAJ_INKREMENTA







	mov r16, r1



	call INKREMENT_ZNAMENKE



	mov r1, r16







	//ako je R1 isa sa 9 na 0, povecaj R2

	cpi r16, 0x03



	BRNE KRAJ_INKREMENTA

	



	mov r16, r2



	call INKREMENT_ZNAMENKE



	mov r2, r16







	//ako je R2 isa sa 9 na 0, povecaj R3

	cpi r16, 0x03



	BRNE KRAJ_INKREMENTA





	mov r16, r3



	call INKREMENT_ZNAMENKE



	mov r3, r16







	//ako je R3 isa sa 9 na 0, povecaj R4 i pomakni zarez ako je na tom mjestu

	cpi r16, 0x03



	BRNE KRAJ_INKREMENTA



	



	//ako je na tom mjestu, pomakni



	sbrs r7, 3	//preskoci ako je bit 3 setan



	lsr r7







	mov r16, r4



	call INKREMENT_ZNAMENKE



	mov r4, r16















	//ako je R4 isa sa 9 na 0, povecaj R5

	cpi r16, 0x03



	BRNE KRAJ_INKREMENTA







	//ako je na tom mjestu, pomakni



	sbrs r7, 2	//preskoci ako je bit 2 clearan



	lsr r7







	mov r16, r5



	call INKREMENT_ZNAMENKE



	mov r5, r16	







	//ako je R5 isa sa 9 na 0, povecaj R6

	cpi r16, 0x03



	BRNE KRAJ_INKREMENTA



	



	//ako je na tom mjestu, pomakni



	sbrs r7, 1	//preskoci ako je bit 1 setan



	lsr r7







	mov r16, r6



	call INKREMENT_ZNAMENKE



	mov r6, r16







	//vrati zarez ako se dogodio prebacaj R6



		



	//ako je na tom mjestu, pomakni



	sbrs r7, 0



	ldi r16, 0x08



	mov r7, r16	//zarez je na pocetnom mjestu







	clr r7



	clr r8



	clr r9







	//mozda bolje da ode na reset?











KRAJ_INKREMENTA:



	pop r16



	out SREG, r16



	pop r16



	reti











ODREDIVANJE_NAGIBA:







// R10R9R8 podijeliti sa 250 (5000mV / 20 mV - rezolucija) - trazi se svakih koliko ms se podigne za 20mV







ret







ISPIS_ZNAMENKE:



	CPI r16, 0x03

	BRNE JEDAN

	LDI r17, 0X3F

	out portc, r17 

	RET



	JEDAN:

	CPI R16, 0x06

	BRNE DVA

	LDI r17, 0X06

	out portc, r17 

	RET



	DVA:

	CPI R16, 0x0C

	BRNE TRI

	LDI r17, 0X5B

	out portc, r17 

	RET



	TRI:

	CPI R16, 0x18

	BRNE CETIRI

	LDI r17, 0X4F

	out portc, r17 

	RET



	CETIRI:

	CPI R16, 0x30

	BRNE PET

	LDI r17, 0X66

	out portc, r17 

	RET



	PET:

	CPI R16,0x60

	BRNE SEST

	LDI r17, 0X6D

	out portc, r17 

	RET



	SEST:

	CPI R16, 0xC0

	BRNE SEDAM

	LDI r17, 0X7D

	out portc, r17 

	RET



	SEDAM:

	CPI R16, 0x21

	BRNE OSAM

	LDI r17, 0X07

	out portc, r17 

	RET



	OSAM:

	CPI R16, 0x42

	BRNE DEVET

	LDI r17, 0X7F

	out portc, r17 

	RET



	DEVET:

	CPI R16, 0x84

	LDI r17, 0X6F

	out portc, r17 

	RET
